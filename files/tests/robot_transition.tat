enum Position = { Home, Factory, Client }
enum Action = { 
    Init,
    // Boxes Actions
    Delivery, Consume,
    // Robot Actions
    Home_to_Factory, Factory_to_Home, Factory_to_Client, Client_to_Factory, Client_to_Home,
    Load,
    Unload
}

cst delivery_quantity: Int
cst robot_capacity: Int

var robot_position: Position
var action: Action

var factory_boxes: Int
var robot_boxes: Int
var client_boxes: Int

init I {
    delivery_quantity = 20 /* 30 */ and
    robot_capacity = 3 and

    robot_position = Home and
    action = Init and

    factory_boxes = 0 and
    robot_boxes = 0 and
    client_boxes = 0
}

trans delivery {
    factory_boxes = 0 and client_boxes = 0 and robot_boxes = 0 and
    |action, factory_boxes|(action' = Delivery and factory_boxes' = delivery_quantity)
}

trans consume {
    client_boxes = delivery_quantity and
    |action, client_boxes|(action' = Consume and client_boxes' = 0)
}

trans home_to_factory {
    robot_position = Home and
    |action, robot_position|(action' = Home_to_Factory and robot_position' = Factory)
}

trans factory_to_home {
    robot_position = Factory and
    |action, robot_position|(action' = Factory_to_Home and robot_position' = Home)
}


trans factory_to_client {
    robot_position = Factory and
    |action, robot_position|(action' = Factory_to_Client and robot_position' = Client)
}

trans client_to_factory {
    robot_position = Client and
    |action, robot_position|(action' = Client_to_Factory and robot_position' = Factory)
}

trans client_to_home {
    robot_position = Client and
    |action, robot_position|(action' = Client_to_Home and robot_position' = Home)
}

trans load {
    robot_position = Factory and robot_boxes = 0 and factory_boxes > 0 and
    |action, robot_boxes, factory_boxes|(
        action' = Load and 
        robot_boxes' = if factory_boxes <= robot_capacity then factory_boxes else robot_capacity end and
        factory_boxes' = factory_boxes - if factory_boxes <= robot_capacity then factory_boxes else robot_capacity end
    )
}

trans unload {
    robot_position = Client and robot_boxes > 0 and 
    |action, robot_boxes, client_boxes|(
        action' = Unload and
        robot_boxes' = 0 and
        client_boxes' = client_boxes + robot_boxes
    )
}

prop = G(F(action = Consume))

search infinite + complete solve