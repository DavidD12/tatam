interval NodeId = 1..100

cst next(node: NodeId): NodeId

var inbox(node: NodeId, other: NodeId): Bool
var outbox(node: NodeId, other: NodeId): Bool

let elected(node: NodeId): Bool = inbox(node, node)

init init_next {
    forall node: NodeId |
        next(node) = if node = 100 then 1 else node + 1 end
    end
}

init init_box {
    forall node, other: NodeId |
        not inbox(node, other) and 
        not outbox(node, other)
    end
}

init init_elected {
    forall node: NodeId |
        not elected(node)
    end
}

trans send(node: NodeId) {
    [inbox, outbox] (
        exists other: NodeId | 
            outbox(node, other) and 
            inbox(node, other)' and
            not outbox(node, other)'
            // TODO: other don't change
        end
    )
}

trans compute(node: NodeId) {
    // TODO
}
